name: Run all tests
on:
  push:
    branches:
      - develop
  pull_request:

env:
  FEATURE_PRIVACY_SETTINGS: "true"
  FEATURE_EXPERIMENTAL_SETTINGS: "true"
  FEATURE_BANXA: "true"
  FEATURE_LAYERSWAP: "true"
  FEATURE_ORBITER: "true"
  FEATURE_VERIFIED_DAPPS: "true"
  FEATURE_ARGENT_SHIELD: "true"
  ARGENT_SHIELD_NETWORK_ID: "mainnet-alpha"
  FEATURE_MULTISIG: "false"

  SEGMENT_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  RAMP_API_KEY: ${{ secrets.RAMP_API_KEY }}
  SAFE_ENV_VARS: true
  ARGENT_API_BASE_URL: ${{ vars.ARGENT_API_BASE_URL }}
  ARGENT_TRANSACTION_REVIEW_API_BASE_URL: ${{ vars.ARGENT_TRANSACTION_REVIEW_API_BASE_URL }}
  ARGENT_X_STATUS_URL: ${{ vars.ARGENT_X_STATUS_URL }}
  ARGENT_EXPLORER_BASE_URL: ${{ vars.ARGENT_EXPLORER_BASE_URL }}

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "yarn"

      - name: Setup project
        run: yarn setup

      - name: Build extension
        run: yarn lerna run --scope @argent-x/extension build

      - name: Check bundlesize for Chrome
        run: yarn run bundlewatch

      - name: Cache build
        uses: actions/cache@v3
        with:
          path: ./*
          key: ${{ github.sha }}

      - name: Set filename prefix
        run: echo "FILENAME_PREFIX=$(echo argent-extension-${{ github.ref_name }} | tr / -)" >> $GITHUB_ENV

      - name: Create chrome zip
        run: (cd ./packages/extension/dist && zip -r "../../../${{ env.FILENAME_PREFIX }}-chrome.zip" .)

      - name: Upload Chrome extension
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.FILENAME_PREFIX }}-chrome.zip
          path: "*-chrome.zip"
          retention-days: 5

  test-unit:
    runs-on: ubuntu-latest
    needs: [setup]

    services:
      devnet:
        image: shardlabs/starknet-devnet:latest-seed0
        ports:
          - 5050:5050

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "yarn"
          fetch-depth: 0

      - name: Restore cached build
        uses: actions/cache@v3
        with:
          path: ./*
          key: ${{ github.sha }}

      - name: Lint
        run: yarn lint

      - name: Run tests
        run: yarn test:ci
      - name: SonarCloud Scan
        # TODO replace with master as soon as sonarcloud fixes the issue with action https://community.sonarsource.com/t/sonarsource-sonarcloud-github-action-failing-with-node-js-12-error/89664/2
        uses: SonarSource/sonarcloud-github-action@v1.8
        with:
          projectBaseDir: ./packages/extension
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

  test-e2e:
    runs-on: ubuntu-latest
    needs: [setup]
    strategy:
      matrix:
        project: [chromium]
        shardIndex: [1, 2, 3, 4, 5, 6, 7, 8]
        shardTotal: [8]
    services:
      devnet:
        image: argentlabs-argent-x.jfrog.io/e2e-starknet-devnet:latest
        ports:
          - 5050:5050
        credentials:
          username: ${{ secrets.JFROG_USERNAME }}
          password: ${{ secrets.JFROG_PASSWORD }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "yarn"

      - name: Restore cached build
        uses: actions/cache@v3
        with:
          path: ./*
          key: ${{ github.sha }}

      - name: Install Playwright Browsers
        run: npx playwright install chromium

      - name: Run e2e tests
        run: xvfb-run --auto-servernum yarn test:e2e --project=${{ matrix.project }} --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            packages/test-results/
            packages/e2e/artifacts/playwright/
            packages/e2e/artifacts/reports/
          retention-days: 5

  build_firefox_extension:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }} # Run only for pull requests
    needs: [setup]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "yarn"

      - name: Restore cached build
        uses: actions/cache@v3
        with:
          path: ./*
          key: ${{ github.sha }}

      - name: Build Firefox version
        run: MANIFEST_VERSION=v2 yarn --cwd packages/extension build

      - name: Set filename prefix
        run: echo "FILENAME_PREFIX=$(echo argent-extension-${{ github.ref_name }} | tr / -)" >> $GITHUB_ENV

      - name: Create firefox zip
        run: (cd ./packages/extension/dist && zip -r "../../../${{ env.FILENAME_PREFIX }}-firefox.zip" .)

      - name: Check bundlesize for firefox
        run: yarn run bundlewatch

      - name: Upload artifacts for firefox
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.FILENAME_PREFIX }}-firefox.zip
          path: "*-firefox.zip"
          retention-days: 5

  create_sentry_release:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && github.actor != 'dependabot[bot]'}} # Run only for pull requests and if not triggered by dependabot
    needs: [setup]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "yarn"

      - name: Restore cached build
        uses: actions/cache@v3
        with:
          path: ./*
          key: ${{ github.sha }}

      - name: Build extension
        run: yarn lerna run --scope @argent-x/extension build

      - name: Get Extension version
        id: package-version
        run: |
          PACKAGE_VERSION=$(cat ./packages/extension/package.json | jq -r '.version')
          echo "current-version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT

      - name: Check sourcemaps
        run: |
          ls -l ./packages/extension
          if [ ! -d "./packages/extension/sourcemaps" ]; then
            echo "No sourcemaps found"
            exit 0
          fi

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_LOG_LEVEL: debug
        with:
          environment: staging
          sourcemaps: "./packages/extension/sourcemaps"
          version: ${{ steps.package-version.outputs.current-version }}-rc__${{ github.sha }}
          ignore_missing: true

  add_pr_comments:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && github.actor != 'dependabot[bot]'}} # Run only for pull requests and if not triggered by dependabot
    needs: [build_firefox_extension, test-unit, test-e2e]

    steps:
      - uses: actions/checkout@v3

      - name: Set GHA_BRANCH
        run: echo "GHA_BRANCH=$(echo $GITHUB_REF | awk -F / '{print $3}')" >> $GITHUB_ENV

      - name: Comment PR
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr comment ${{ env.GHA_BRANCH }} --body "[Builds for local testing](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
